{"version":3,"sources":["emailEntity.ts","EmailsInputDOM.ts","emailsInput.ts"],"names":[],"mappings":"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","file":"emailsInput.27c50244.js","sourceRoot":"../src","sourcesContent":["/*\n Individual email state\n */\n\nexport class EmailEntity {\n    valid = false\n    value = ''\n    completed = false\n\n    constructor(value?: string) {\n        if (typeof value !== 'undefined') {\n           this.complete()\n            this.update(value)\n        }\n    }\n\n    public complete(): void {\n        this.completed = true\n    }\n\n    public update(value: string): void {\n        this.valid = EmailEntity.validate(value)\n        this.value = value\n    }\n\n    public static validate(value: string): boolean {\n        const re = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n        return re.test(String(value).toLowerCase());\n    }\n}","// encapsulate EmailsInput direct DOM manipulations\n\nimport * as styles from './style.css'\nimport {EmailEntity} from \"./emailEntity\";\n\nexport type ControlItemProps = {title: string, onClick: (event: MouseEvent) => void}\n\nexport class EmailsInputDOM {\n\n    inputNode: HTMLInputElement | null\n    wrapperNode: HTMLDivElement | null\n    emailsContainer: HTMLDivElement | null\n    inputBodyNode: HTMLDivElement | null\n    titleNode: HTMLHeadingElement | null\n    controlsNode: HTMLDivElement | null\n    controlItems: HTMLButtonElement[] = []\n\n\n    constructor(root: HTMLElement) {\n        this.wrapperNode = EmailsInputDOM.mountWrapper(root)\n\n        this.inputBodyNode = EmailsInputDOM.mountBody(this.wrapperNode)\n        this.titleNode = EmailsInputDOM.mountTitle(this.inputBodyNode)\n        this.emailsContainer = EmailsInputDOM.mountEmailsContainer(this.inputBodyNode)\n        this.inputNode = EmailsInputDOM.mountInput(this.emailsContainer)\n\n        this.controlsNode = EmailsInputDOM.mountControls(this.wrapperNode)\n    }\n\n    public addEmailsItem(entity: EmailEntity, onDelete: () => void) {\n        if (!this.emailsContainer) throw Error('emailsContainer is not mounted')\n\n        const item = EmailsInputDOM.mountEmailItem(this.emailsContainer)\n        item.className = [styles.emailItem, entity.valid? styles.emailItemCorrect : styles.emailItemError].join(' ')\n        item.innerHTML = entity.value\n\n        const cross = document.createElement('div')\n        cross.onclick = () => {\n            onDelete()\n            this.emailsContainer?.removeChild(item)\n        }\n        cross.className = styles.emailItemDelete\n\n\n        item.appendChild(cross)\n        return item\n    }\n\n    public addControl(props: ControlItemProps) {\n        if (!this.controlsNode) throw Error('controlsNode is not mounted')\n        const controlNode = document.createElement('button')\n        controlNode.innerText = props.title\n        controlNode.onclick = props.onClick\n        controlNode.className = styles.controlItem\n        EmailsInputDOM.mountControl(this.controlsNode, controlNode)\n    }\n\n    public destroy() {\n        this.inputNode?.remove()\n        this.inputNode = null\n\n        this.wrapperNode?.remove()\n        this.wrapperNode = null\n    }\n\n    private static mountControl(where: HTMLElement, control: HTMLButtonElement): HTMLButtonElement {\n        where.appendChild(control)\n        return control\n    }\n\n    private static mountWrapper(where: HTMLElement): HTMLDivElement {\n        const wrapper: HTMLDivElement = document.createElement('div')\n        wrapper.className = styles.wrapper\n\n        where.appendChild(wrapper)\n\n        return wrapper\n    }\n\n    private static mountBody(where: HTMLElement): HTMLDivElement {\n        const body = document.createElement('div')\n        body.className = styles.body\n\n        where.appendChild(body)\n\n        return body\n    }\n\n    private static mountEmailsContainer(where: HTMLElement): HTMLDivElement {\n        const item: HTMLDivElement = document.createElement('div')\n        item.className = styles.emailsContainer\n        where.appendChild(item)\n\n        return item\n    }\n\n    private static mountEmailItem(where: HTMLElement): HTMLDivElement {\n        const item: HTMLDivElement = document.createElement('div')\n        item.className = styles.emailItem\n        where.prepend(item)\n\n        return item\n    }\n\n    private static mountInput(where: HTMLElement): HTMLInputElement {\n\n        const input: HTMLInputElement = document.createElement('input')\n        input.className = styles.input\n        input.placeholder = 'add more people...'\n\n        where.appendChild(input)\n\n        return input\n    }\n\n    private static mountTitle(body: HTMLElement): HTMLHeadingElement {\n        const title = document.createElement('h5')\n        title.className = styles.title\n        title.innerHTML = 'Share <b>Board name</b> with others'\n\n        body.appendChild(title)\n\n        return title\n    }\n\n    private static mountControls(wrapper: HTMLElement) {\n        const controls = document.createElement('div')\n        controls.className = styles.controls\n\n        wrapper.appendChild(controls)\n\n        return controls\n    }\n}","import {EmailEntity} from \"./emailEntity\";\nimport {ControlItemProps, EmailsInputDOM} from \"./EmailsInputDOM\";\n\nexport const FLAGS = {\n    FONTS_INJECTED: false\n}\n// add font\nexport const OPEN_SANS_HREF = \"https://fonts.googleapis.com/css?family=Open+Sans\"\n\nexport function injectFonts() {\n    const fonts = document.createElement('link')\n    fonts.href = OPEN_SANS_HREF\n    fonts.rel = 'stylesheet'\n    document.body.appendChild(fonts)\n\n    FLAGS.FONTS_INJECTED = true\n}\n\nexport class EmailsInput {\n    constructor(containerNode: HTMLDivElement) {\n        if (!FLAGS.FONTS_INJECTED) {\n            injectFonts()\n        }\n        this.DOM = new EmailsInputDOM(containerNode)\n\n        this.applyListenersListeners()\n    }\n\n    public entities: EmailEntity[] = []\n\n    public DOM: EmailsInputDOM\n\n    public get lastEntity(): EmailEntity | undefined {\n        if (this.entities.length) {\n            return this.entities[this.entities.length - 1]\n        }\n        return undefined\n    }\n\n    public addEmail(email: string) {\n        const entity = new EmailEntity(email)\n        this.entities.push(entity)\n\n        this.DOM.addEmailsItem(entity, () => this.deleteEntity(entity))\n    }\n\n    public addControlItem(control: ControlItemProps) {\n        this.DOM.addControl(control)\n    }\n\n    public destroy() {\n        this.DOM.destroy()\n    }\n\n    private applyListenersListeners() {\n        this.DOM.inputNode?.addEventListener('keydown', this.handleCompleteKeys)\n        this.DOM.inputNode?.addEventListener('input', this.handleInput)\n        this.DOM.inputNode?.addEventListener('blur', this.completeEmailBlock)\n        this.DOM.inputNode?.addEventListener('paste', this.handlePaste)\n    }\n\n    private completeEmailBlock = () => {\n        const entity = this.lastEntity\n        if (!entity || entity.completed) return\n        entity.complete()\n        this.DOM.addEmailsItem(entity, () => this.deleteEntity(entity))\n        if (this.DOM.inputNode) {\n            this.DOM.inputNode.value = ''\n        }\n    }\n\n    private deleteEntity = (entity: EmailEntity) => {\n        this.entities = this.entities.filter(val => val !== entity)\n    }\n\n    private handleCompleteKeys = (event: KeyboardEvent) => {\n        switch (event.key) {\n            case ',':\n            case 'Enter': {\n                // complete current block\n                this.completeEmailBlock()\n                event.preventDefault()\n                return\n            }\n            default: {\n                return\n            }\n        }\n    }\n\n    private handleInput = (event: Event) => {\n        let lastEntity = this.lastEntity\n        if (!lastEntity || (lastEntity && lastEntity.completed)) {\n            const newEntity = new EmailEntity()\n            this.entities.push(newEntity)\n            lastEntity = newEntity\n        }\n        lastEntity.update((<HTMLInputElement>event.currentTarget).value)\n    }\n    private handlePaste = (event: ClipboardEvent) => {\n        event.preventDefault()\n        const text = event.clipboardData?.getData('text')\n        if (!text) return\n        text\n            .split(',')\n            .map(email => email.trim())\n            .forEach(email => {\n                this.addEmail(email)\n            })\n    }\n}\n\nwindow.EmailsInput = EmailsInput"]}